# -*- coding: utf-8 -*-
"""Fake_News.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d-MKhn3zePbSjF0dj0QCBUXqCsT4B-6E
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate  #for tablular format

#For Preprocessing
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report

#The Models
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier

import warnings
warnings.filterwarnings("ignore")

"""#FUNCTIONS

###Data checking
"""

def datacheck(data):

    print(f"Rows: {data.shape[0]}\tColumns: {data.shape[1]}")
    table_data = []

    for i in data.columns:
      table_data.append([i, len(data[i].unique()), data[i].isna().sum(), data[i].dtypes])
    print(tabulate(table_data, headers=["Column", "Total Unique Values", "Missing Values","Data Type"], tablefmt="fancy_grid"))

    return

"""###Processing texts"""

def text_pre(word):
    word = word.lower()
    word = re.sub('\[.*?\]', '', word)                  #Removing anything enclosed in square brackets
    word = re.sub("\\W"," ",word)                       #Replaces all non-alphanumeric characters
    word = re.sub('https?://\S+|www\.\S+', '', word)    #Remove all URLs
    word = re.sub('<.*?>+', '', word)                   #Remove HTML tags
    word = re.sub('[%s]' % re.escape(string.punctuation), '', word)  #Remove punctuation characters
    word = re.sub('\n', '', word)                       #Removes newline characters
    word = re.sub('\w*\d\w*', '', word)                 #Removes alphanumeric characters and digits
    return word

"""###MODELS"""

def mod(model,x_train_std, x_test_std, y_train, y_test):

    #classification_report
    y_pred = model.predict(x_test_std)
    print(classification_report(y_test, y_pred))

    print("\n")
    return

"""For Prediction"""

def pred(model,news):

    y_pred = model.predict(news)

    if y_pred == 0:
        Z= "Fake News"
    elif y_pred == 1:
        Z= "True News"

    print(tabulate([{Z}], headers=[{model}], tablefmt="fancy_grid"))
    return

"""###Testing"""

def testing(news):

    #news = str(input())
    new_df1 = pd.DataFrame({"text": [news]})
    new_df1["text"] = new_df1["text"].apply(text_pre) #text preprocessing function
    new_df1 = vectorizer.transform(new_df1["text"])

    pred(logi,new_df1)
    pred(tree,new_df1)
    pred(ranfor,new_df1)
    pred(nnmodel,new_df1)

    return

"""#DATASET"""

dft = pd.read_csv('/content/drive/MyDrive/Python/True.csv')
dff = pd.read_csv('/content/drive/MyDrive/Python/Fake.csv')

#dft.head()
dff.head()

datacheck(dft)

datacheck(dff)

"""Creating a new column called class"""

#First a dictionary is created with column 'class' as we had an type-error
dft_modified = 1 #True
dff_modified = 0  #False

dft['class'] = dft_modified
dff['class'] = dff_modified

"""Merging both of them"""

df_combine=pd.concat([dff,dft])

datacheck(df_combine)

"""Keeping only the text and class columns"""

df_combine=df_combine[['text','class']]

"""Randomizing the rows"""

df_combine = df_combine.sample(frac=1)

df_combine.columns

#.apply() -> applies a function to each element of DataFrame
df_combine['text']=df_combine['text'].apply(text_pre)

"""80:20 Training : Test"""

X = df_combine['text']
y = df_combine['class']

x_train, x_test, y_train, y_test = train_test_split(X,y, shuffle=True, stratify=y, test_size=0.2, random_state=99)

"""TfidfVectorizer"""

#convert text into numerical vectors based on word importance
vectorizer = TfidfVectorizer()
x_train_std = vectorizer.fit_transform(x_train)
x_test_std = vectorizer.transform(x_test)

"""#MODELS

###LOGISTIC REGRESSION
"""

logi = LogisticRegression()
logi.fit(x_train_std, y_train)

mod(logi,x_train_std, x_test_std, y_train, y_test)

"""###Decision Tree"""

tree = DecisionTreeClassifier(random_state=99,max_depth = 5)
tree.fit(x_train_std, y_train)

mod(tree,x_train_std, x_test_std, y_train, y_test)

"""###Random Forest"""

ranfor = RandomForestClassifier(ccp_alpha = 0.001, max_depth = 9, n_estimators = 500, min_samples_split = 10, random_state = 999)
ranfor.fit(x_train_std, y_train)

mod(ranfor,x_train_std, x_test_std, y_train, y_test)

"""###Neural Network"""

nnmodel = MLPClassifier(hidden_layer_sizes=(5,), activation='identity', alpha =0.0001)
nnmodel.fit(x_train_std, y_train)

mod(nnmodel,x_train_std, x_test_std, y_train, y_test)

"""#Fake News Test"""

news = str(input())
testing(news)

news = str(input())
testing(news)

news = str(input())
testing(news)